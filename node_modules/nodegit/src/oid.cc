// This is a generated file, modify: generate/templates/class_content.cc

#include <nan.h>
#include <string.h>

extern "C" {
#include <git2.h>
}

#include "../include/lock_master.h"
#include "../include/functions/copy.h"
#include "../include/oid.h"
#include "../include/functions/sleep_for_ms.h"


#include <iostream>

using namespace std;
using namespace v8;
using namespace node;

GitOid::GitOid(git_oid *raw, bool selfFreeing, bool shouldDuplicate)
{
  if (shouldDuplicate) {
    this->raw = (git_oid *)malloc(sizeof(git_oid));
    git_oid_cpy(this->raw, raw);
    selfFreeing = true;
  } else {
    this->raw = raw;
  }
  this->selfFreeing = selfFreeing;

  if (selfFreeing) {
    SelfFreeingInstanceCount++;
  } else {
    NonSelfFreeingConstructedCount++;
  }

}

GitOid::~GitOid()
{
  if (this->selfFreeing) {
    free(this->raw);
    SelfFreeingInstanceCount--;

    this->raw = NULL;
  }

  // this will cause an error if you have a non-self-freeing object that also needs
  // to save values. Since the object that will eventually free the object has no
  // way of knowing to free these values.
}

void GitOid::InitializeComponent(Local<v8::Object> target)
{
  Nan::HandleScope scope;

  Local<FunctionTemplate> tpl = Nan::New<FunctionTemplate>(JSNewFunction);

  tpl->InstanceTemplate()->SetInternalFieldCount(1);
  tpl->SetClassName(Nan::New("Oid").ToLocalChecked());

  Nan::SetPrototypeMethod(tpl, "cmp", Cmp);
  Nan::SetPrototypeMethod(tpl, "cpy", Cpy);
  Nan::SetPrototypeMethod(tpl, "equal", Equal);
  Nan::SetMethod(tpl, "fromString", Fromstr);
  Nan::SetPrototypeMethod(tpl, "iszero", Iszero);
  Nan::SetPrototypeMethod(tpl, "ncmp", Ncmp);
  Nan::SetPrototypeMethod(tpl, "strcmp", Strcmp);
  Nan::SetPrototypeMethod(tpl, "streq", Streq);
  Nan::SetPrototypeMethod(tpl, "tostrS", TostrS);

  Nan::SetMethod(tpl, "getSelfFreeingInstanceCount", GetSelfFreeingInstanceCount);
  Nan::SetMethod(tpl, "getNonSelfFreeingConstructedCount", GetNonSelfFreeingConstructedCount);

  Local<Function> _constructor_template = Nan::GetFunction(tpl).ToLocalChecked();
  constructor_template.Reset(_constructor_template);
  Nan::Set(target, Nan::New("Oid").ToLocalChecked(), _constructor_template);
}

NAN_METHOD(GitOid::JSNewFunction)
{

  if (info.Length() == 0 || !info[0]->IsExternal()) {
    return Nan::ThrowError("A new GitOid cannot be instantiated.");
  }

  GitOid* object = new GitOid(static_cast<git_oid *>(
                                Local<External>::Cast(info[0])->Value()),
                              Nan::To<bool>(info[1]).FromJust(),
                              info.Length() >= 3 ? Nan::To<bool>(info[2]).FromJust() : false
                             );
  object->Wrap(info.This());

  info.GetReturnValue().Set(info.This());
}

Local<v8::Value> GitOid::New(const git_oid *raw, bool selfFreeing, bool shouldDuplicate)
{
  Nan::EscapableHandleScope scope;
  Local<v8::Value> argv[3] = { Nan::New<External>((void *)raw), Nan::New(selfFreeing), Nan::New(shouldDuplicate) };
  return scope.Escape(Nan::NewInstance(Nan::New(GitOid::constructor_template), 3, argv).ToLocalChecked());
}

NAN_METHOD(GitOid::GetSelfFreeingInstanceCount)
{
  info.GetReturnValue().Set(SelfFreeingInstanceCount);
}

NAN_METHOD(GitOid::GetNonSelfFreeingConstructedCount)
{
  info.GetReturnValue().Set(NonSelfFreeingConstructedCount);
}

git_oid *GitOid::GetValue()
{
  return this->raw;
}

void GitOid::ClearValue()
{
  this->raw = NULL;
}


/*
   * @param Oid b
     * @return Number  result    */
NAN_METHOD(GitOid::Cmp)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0
      || (!info[0]->IsObject() && !info[0]->IsString())) {
    return Nan::ThrowError("Oid b is required.");
  }
// start convert_from_v8 block
  const git_oid * from_b;
  if (info[0]->IsString()) {
    // Try and parse in a string to a git_oid
    String::Utf8Value oidString(info[0]->ToString());
    git_oid *oidOut = (git_oid *)malloc(sizeof(git_oid));

    if (git_oid_fromstr(oidOut, (const char *) strdup(*oidString)) != GIT_OK) {
      free(oidOut);

      if (giterr_last()) {
        return Nan::ThrowError(giterr_last()->message);
      } else {
        return Nan::ThrowError("Unknown Error");
      }
    }

    from_b = oidOut;
  } else {
    from_b = Nan::ObjectWrap::Unwrap<GitOid>(info[0]->ToObject())->GetValue();
  }
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                          ,    from_b
                         );

    int result = git_oid_cmp(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                   ,  from_b
                 );

    if (info[0]->IsString()) {
      free((void *)from_b);
    }

    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
      * @return Oid out    */
NAN_METHOD(GitOid::Cpy)
{
  Nan::EscapableHandleScope scope;

  git_oid *out = (git_oid *)malloc(sizeof(git_oid));

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                         );

    git_oid_cpy(
      out
      ,  Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
    );


    Local<v8::Value> to;
// start convert_to_v8 block

    if (out != NULL) {
      // GitOid out
      to = GitOid::New(out, false  );
    } else {
      to = Nan::Null();
    }

// end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
   * @param Oid b
     * @return Number  result    */
NAN_METHOD(GitOid::Equal)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0
      || (!info[0]->IsObject() && !info[0]->IsString())) {
    return Nan::ThrowError("Oid b is required.");
  }
// start convert_from_v8 block
  const git_oid * from_b;
  if (info[0]->IsString()) {
    // Try and parse in a string to a git_oid
    String::Utf8Value oidString(info[0]->ToString());
    git_oid *oidOut = (git_oid *)malloc(sizeof(git_oid));

    if (git_oid_fromstr(oidOut, (const char *) strdup(*oidString)) != GIT_OK) {
      free(oidOut);

      if (giterr_last()) {
        return Nan::ThrowError(giterr_last()->message);
      } else {
        return Nan::ThrowError("Unknown Error");
      }
    }

    from_b = oidOut;
  } else {
    from_b = Nan::ObjectWrap::Unwrap<GitOid>(info[0]->ToObject())->GetValue();
  }
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                          ,    from_b
                         );

    int result = git_oid_equal(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                   ,  from_b
                 );

    if (info[0]->IsString()) {
      free((void *)from_b);
    }

    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
  * @param String str
     * @return Oid out    */
NAN_METHOD(GitOid::Fromstr)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0 || !info[0]->IsString()) {
    return Nan::ThrowError("String str is required.");
  }

  git_oid *out = (git_oid *)malloc(sizeof(git_oid));
// start convert_from_v8 block
  const char * from_str;

  String::Utf8Value str(info[0]->ToString());
  // malloc with one extra byte so we can add the terminating null character C-strings expect:
  from_str = (const char *) malloc(str.length() + 1);
  // copy the characters from the nodejs string into our C-string (used instead of strdup or strcpy because nulls in
  // the middle of strings are valid coming from nodejs):
  memcpy((void *)from_str, *str, str.length());
  // ensure the final byte of our new string is null, extra casts added to ensure compatibility with various C types
  // used in the nodejs binding generation:
  memset((void *)(((char *)from_str) + str.length()), 0, 1);
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    from_str
                         );

    git_oid_fromstr(
      out
      ,  from_str
    );


    Local<v8::Value> to;
// start convert_to_v8 block

    if (out != NULL) {
      // GitOid out
      to = GitOid::New(out, false  );
    } else {
      to = Nan::Null();
    }

// end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
     * @return Number  result    */
NAN_METHOD(GitOid::Iszero)
{
  Nan::EscapableHandleScope scope;


  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                         );

    int result = git_oid_iszero(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                 );


    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
   * @param Oid b
   * @param Number len
     * @return Number  result    */
NAN_METHOD(GitOid::Ncmp)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0
      || (!info[0]->IsObject() && !info[0]->IsString())) {
    return Nan::ThrowError("Oid b is required.");
  }
  if (info.Length() == 1 || !info[1]->IsNumber()) {
    return Nan::ThrowError("Number len is required.");
  }

// start convert_from_v8 block
  const git_oid * from_b;
  if (info[0]->IsString()) {
    // Try and parse in a string to a git_oid
    String::Utf8Value oidString(info[0]->ToString());
    git_oid *oidOut = (git_oid *)malloc(sizeof(git_oid));

    if (git_oid_fromstr(oidOut, (const char *) strdup(*oidString)) != GIT_OK) {
      free(oidOut);

      if (giterr_last()) {
        return Nan::ThrowError(giterr_last()->message);
      } else {
        return Nan::ThrowError("Unknown Error");
      }
    }

    from_b = oidOut;
  } else {
    from_b = Nan::ObjectWrap::Unwrap<GitOid>(info[0]->ToObject())->GetValue();
  }
// end convert_from_v8 block
// start convert_from_v8 block
  size_t from_len;
  from_len = (size_t)   info[1]->ToNumber()->Value();
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                          ,    from_b
                         );

    int result = git_oid_ncmp(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                   ,  from_b
                   ,  from_len
                 );

    if (info[0]->IsString()) {
      free((void *)from_b);
    }

    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
   * @param String str
     * @return Number  result    */
NAN_METHOD(GitOid::Strcmp)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0 || !info[0]->IsString()) {
    return Nan::ThrowError("String str is required.");
  }

// start convert_from_v8 block
  const char * from_str;

  String::Utf8Value str(info[0]->ToString());
  // malloc with one extra byte so we can add the terminating null character C-strings expect:
  from_str = (const char *) malloc(str.length() + 1);
  // copy the characters from the nodejs string into our C-string (used instead of strdup or strcpy because nulls in
  // the middle of strings are valid coming from nodejs):
  memcpy((void *)from_str, *str, str.length());
  // ensure the final byte of our new string is null, extra casts added to ensure compatibility with various C types
  // used in the nodejs binding generation:
  memset((void *)(((char *)from_str) + str.length()), 0, 1);
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                          ,    from_str
                         );

    int result = git_oid_strcmp(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                   ,  from_str
                 );


    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
   * @param String str
     * @return Number  result    */
NAN_METHOD(GitOid::Streq)
{
  Nan::EscapableHandleScope scope;

  if (info.Length() == 0 || !info[0]->IsString()) {
    return Nan::ThrowError("String str is required.");
  }

// start convert_from_v8 block
  const char * from_str;

  String::Utf8Value str(info[0]->ToString());
  // malloc with one extra byte so we can add the terminating null character C-strings expect:
  from_str = (const char *) malloc(str.length() + 1);
  // copy the characters from the nodejs string into our C-string (used instead of strdup or strcpy because nulls in
  // the middle of strings are valid coming from nodejs):
  memcpy((void *)from_str, *str, str.length());
  // ensure the final byte of our new string is null, extra casts added to ensure compatibility with various C types
  // used in the nodejs binding generation:
  memset((void *)(((char *)from_str) + str.length()), 0, 1);
// end convert_from_v8 block

  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                          ,    from_str
                         );

    int result = git_oid_streq(
                   Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                   ,  from_str
                 );


    Local<v8::Value> to;
// start convert_to_v8 block
    to = Nan::New<Number>( result);
    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}

/*
     * @return String  result    */
NAN_METHOD(GitOid::TostrS)
{
  Nan::EscapableHandleScope scope;


  giterr_clear();

  {
    LockMaster lockMaster(true        ,    Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                         );

    char * result = git_oid_tostr_s(
                      Nan::ObjectWrap::Unwrap<GitOid>(info.This())->GetValue()
                    );

    // null checks on pointers
    if (!result) {
      return info.GetReturnValue().Set(scope.Escape(Nan::Undefined()));
    }

    Local<v8::Value> to;
// start convert_to_v8 block
    if (result) {
      to = Nan::New<String>(result).ToLocalChecked();
    } else {
      to = Nan::Null();
    }

    // end convert_to_v8 block
    return info.GetReturnValue().Set(scope.Escape(to));
  }
}
Nan::Persistent<Function> GitOid::constructor_template;

int GitOid::SelfFreeingInstanceCount;
int GitOid::NonSelfFreeingConstructedCount;
