// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITSTATUSENTRY_H
#define GITSTATUSENTRY_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/diff_delta.h"

using namespace node;
using namespace v8;

class GitStatusEntry : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_status_entry *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_status_entry *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitStatusEntry(git_status_entry *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitStatusEntry();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);

  static NAN_METHOD(Status);
  static NAN_METHOD(HeadToIndex);
  static NAN_METHOD(IndexToWorkdir);
  git_status_entry *raw;
};

#endif
