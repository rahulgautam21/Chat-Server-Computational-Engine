// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITODB_H
#define GITODB_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/odb_object.h"
#include "../include/oid.h"
// Forward declaration.
struct git_odb {
};

using namespace node;
using namespace v8;

class GitOdb : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_odb *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_odb *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitOdb(git_odb *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitOdb();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);


  static NAN_METHOD(AddDiskAlternate);

  static NAN_METHOD(Free);

  struct OpenBaton {
    int error_code;
    const git_error* error;
    git_odb * out;
    const char * objects_dir;
  };
  class OpenWorker : public Nan::AsyncWorker {
  public:
    OpenWorker(
      OpenBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~OpenWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    OpenBaton *baton;
  };

  static NAN_METHOD(Open);

  struct ReadBaton {
    int error_code;
    const git_error* error;
    git_odb_object * out;
    git_odb * db;
    const git_oid * id;
    bool idNeedsFree;
  };
  class ReadWorker : public Nan::AsyncWorker {
  public:
    ReadWorker(
      ReadBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~ReadWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    ReadBaton *baton;
  };

  static NAN_METHOD(Read);

  struct WriteBaton {
    int error_code;
    const git_error* error;
    git_oid * out;
    git_odb * odb;
    const void * data;
    size_t len;
    git_otype type;
  };
  class WriteWorker : public Nan::AsyncWorker {
  public:
    WriteWorker(
      WriteBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~WriteWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    WriteBaton *baton;
  };

  static NAN_METHOD(Write);
  git_odb *raw;
};

#endif
