// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITBUF_H
#define GITBUF_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/git_buf_converter.h"

using namespace node;
using namespace v8;

class GitBuf : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_buf *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_buf *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitBuf(git_buf *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitBuf();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);

  static NAN_METHOD(Ptr);
  static NAN_METHOD(Asize);
  static NAN_METHOD(Size);

  static NAN_METHOD(ContainsNul);

  static NAN_METHOD(Free);

  struct GrowBaton {
    int error_code;
    const git_error* error;
    git_buf * buffer;
    size_t target_size;
  };
  class GrowWorker : public Nan::AsyncWorker {
  public:
    GrowWorker(
      GrowBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~GrowWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    GrowBaton *baton;
  };

  static NAN_METHOD(Grow);

  static NAN_METHOD(IsBinary);

  struct SetBaton {
    int error_code;
    const git_error* error;
    git_buf * buffer;
    const void * data;
    size_t datalen;
  };
  class SetWorker : public Nan::AsyncWorker {
  public:
    SetWorker(
      SetBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~SetWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    SetBaton *baton;
  };

  static NAN_METHOD(Set);
  git_buf *raw;
};

#endif
