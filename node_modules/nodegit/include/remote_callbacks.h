// This is a generated file, modify: generate/templates/struct_header.h

#ifndef GITREMOTECALLBACKS_H
#define GITREMOTECALLBACKS_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"

extern "C" {
#include <git2.h>
}

#include "../include/cred.h"
#include "../include/cert.h"
#include "../include/transfer_progress.h"

using namespace node;
using namespace v8;

class GitRemoteCallbacks : public Nan::ObjectWrap {
public:
  GitRemoteCallbacks(git_remote_callbacks* raw, bool selfFreeing);
  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);

  git_remote_callbacks *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_remote_callbacks *raw, bool selfFreeing);

  bool selfFreeing;

  static int credentials_cppCallback (
    git_cred ** cred
    ,
    const char * url
    ,
    const char * username_from_url
    ,
    unsigned int allowed_types
    ,
    void * payload
  );

  static void credentials_async(uv_async_t* req, int status);
  static void credentials_promiseCompleted(bool isFulfilled, AsyncBaton *_baton, v8::Local<v8::Value> result);
  struct CredentialsBaton : public AsyncBaton {
    git_cred ** cred;
    const char * url;
    const char * username_from_url;
    unsigned int allowed_types;
    void * payload;

    int result;
  };
  static int certificate_check_cppCallback (
    git_cert * cert
    ,
    int valid
    ,
    const char * host
    ,
    void * payload
  );

  static void certificate_check_async(uv_async_t* req, int status);
  static void certificate_check_promiseCompleted(bool isFulfilled, AsyncBaton *_baton, v8::Local<v8::Value> result);
  struct CertificateCheckBaton : public AsyncBaton {
    git_cert * cert;
    int valid;
    const char * host;
    void * payload;

    int result;
  };
  static int transfer_progress_cppCallback (
    const git_transfer_progress * stats
    ,
    void * payload
  );

  static void transfer_progress_async(uv_async_t* req, int status);
  static void transfer_progress_promiseCompleted(bool isFulfilled, AsyncBaton *_baton, v8::Local<v8::Value> result);
  struct TransferProgressBaton : public AsyncBaton {
    const git_transfer_progress * stats;
    void * payload;

    int result;
  };

private:
  GitRemoteCallbacks();
  ~GitRemoteCallbacks();

  void ConstructFields();

  static NAN_METHOD(JSNewFunction);


  static NAN_GETTER(GetVersion);
  static NAN_SETTER(SetVersion);

  Nan::Callback* credentials;

  static NAN_GETTER(GetCredentials);
  static NAN_SETTER(SetCredentials);

  Nan::Callback* certificate_check;

  static NAN_GETTER(GetCertificateCheck);
  static NAN_SETTER(SetCertificateCheck);

  Nan::Callback* transfer_progress;

  static NAN_GETTER(GetTransferProgress);
  static NAN_SETTER(SetTransferProgress);

  Nan::Persistent<Value> payload;

  static NAN_GETTER(GetPayload);
  static NAN_SETTER(SetPayload);


  git_remote_callbacks *raw;
};

#endif
