// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITGRAPH_H
#define GITGRAPH_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/repository.h"
#include "../include/oid.h"

using namespace node;
using namespace v8;

class GitGraph : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  bool selfFreeing;



private:



  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);


  struct AheadBehindBaton {
    int error_code;
    const git_error* error;
    size_t * ahead;
    size_t * behind;
    git_repository * repo;
    const git_oid * local;
    bool localNeedsFree;
    const git_oid * upstream;
    bool upstreamNeedsFree;
  };
  class AheadBehindWorker : public Nan::AsyncWorker {
  public:
    AheadBehindWorker(
      AheadBehindBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~AheadBehindWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    AheadBehindBaton *baton;
  };

  static NAN_METHOD(AheadBehind);

  struct DescendantOfBaton {
    int error_code;
    const git_error* error;
    git_repository * repo;
    const git_oid * commit;
    bool commitNeedsFree;
    const git_oid * ancestor;
    bool ancestorNeedsFree;
  };
  class DescendantOfWorker : public Nan::AsyncWorker {
  public:
    DescendantOfWorker(
      DescendantOfBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~DescendantOfWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    DescendantOfBaton *baton;
  };

  static NAN_METHOD(DescendantOf);
};

#endif
