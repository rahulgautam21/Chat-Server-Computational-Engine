// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITTIME_H
#define GITTIME_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"


using namespace node;
using namespace v8;

class GitTime : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_time *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_time *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitTime(git_time *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitTime();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);

  static NAN_METHOD(Time);
  static NAN_METHOD(Offset);
  git_time *raw;
};

#endif
