// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITCONFIG_H
#define GITCONFIG_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/git_buf_converter.h"
#include "../include/buf.h"
// Forward declaration.
struct git_config {
};

using namespace node;
using namespace v8;

class GitConfig : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_config *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_config *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitConfig(git_config *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitConfig();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);


  struct GetStringBufBaton {
    int error_code;
    const git_error* error;
    git_buf * out;
    const git_config * cfg;
    const char * name;
  };
  class GetStringBufWorker : public Nan::AsyncWorker {
  public:
    GetStringBufWorker(
      GetStringBufBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~GetStringBufWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    GetStringBufBaton *baton;
  };

  static NAN_METHOD(GetStringBuf);

  struct OpenDefaultBaton {
    int error_code;
    const git_error* error;
    git_config * out;
  };
  class OpenDefaultWorker : public Nan::AsyncWorker {
  public:
    OpenDefaultWorker(
      OpenDefaultBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~OpenDefaultWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    OpenDefaultBaton *baton;
  };

  static NAN_METHOD(OpenDefault);

  static NAN_METHOD(SetInt64);

  static NAN_METHOD(SetMultivar);

  struct SetStringBaton {
    int error_code;
    const git_error* error;
    git_config * cfg;
    const char * name;
    const char * value;
  };
  class SetStringWorker : public Nan::AsyncWorker {
  public:
    SetStringWorker(
      SetStringBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~SetStringWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    SetStringBaton *baton;
  };

  static NAN_METHOD(SetString);

  struct SnapshotBaton {
    int error_code;
    const git_error* error;
    git_config * out;
    git_config * config;
  };
  class SnapshotWorker : public Nan::AsyncWorker {
  public:
    SnapshotWorker(
      SnapshotBaton *_baton,
      Nan::Callback *callback
    ) : Nan::AsyncWorker(callback)
      , baton(_baton) {};
    ~SnapshotWorker() {};
    void Execute();
    void HandleOKCallback();

  private:
    SnapshotBaton *baton;
  };

  static NAN_METHOD(Snapshot);
  git_config *raw;
};

#endif
