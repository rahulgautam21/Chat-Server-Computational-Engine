// This is a generated file, modify: generate/templates/class_header.h

#ifndef GITTREEENTRY_H
#define GITTREEENTRY_H
#include <nan.h>
#include <string>
#include <queue>
#include <utility>

#include "async_baton.h"
#include "promise_completion.h"

extern "C" {
#include <git2.h>
}

#include "../include/typedefs.h"

#include "../include/oid.h"
// Forward declaration.
struct git_tree_entry {
  uint16_t attr;
  git_oid oid;
  size_t filename_len;
  char filename[1];
};

using namespace node;
using namespace v8;

class GitTreeEntry : public Nan::ObjectWrap {
public:

  static Nan::Persistent<Function> constructor_template;
  static void InitializeComponent (Local<v8::Object> target);
  // diagnostic count of self-freeing object instances
  static int SelfFreeingInstanceCount;
  // diagnostic count of constructed non-self-freeing object instances
  static int NonSelfFreeingConstructedCount;

  git_tree_entry *GetValue();
  void ClearValue();

  static Local<v8::Value> New(const git_tree_entry *raw, bool selfFreeing, bool shouldDuplicate = false);
  bool selfFreeing;



private:


  GitTreeEntry(git_tree_entry *raw, bool selfFreeing, bool shouldDuplicate = false);
  ~GitTreeEntry();

  static NAN_METHOD(JSNewFunction);
  static NAN_METHOD(GetSelfFreeingInstanceCount);
  static NAN_METHOD(GetNonSelfFreeingConstructedCount);

  static NAN_METHOD(Attr);
  static NAN_METHOD(Oid);
  static NAN_METHOD(FilenameLen);
  static NAN_METHOD(Filename);
  git_tree_entry *raw;
};

#endif
